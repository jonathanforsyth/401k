import Foundation

enum Calculations {
    private static let pennyRoundingBehavior = NSDecimalNumberHandler(
        roundingMode: .bankers,
        scale: 2,
        raiseOnExactness: false,
        raiseOnOverflow: true,
        raiseOnUnderflow: true,
        raiseOnDivideByZero: true
    )
    static func computeMonthlyEarnings(hours hoursWorked: Int, atPayRate payRate: Int) -> Decimal {
        let base = Decimal(hoursWorked * payRate) as NSDecimalNumber
        return base.rounding(accordingToBehavior: pennyRoundingBehavior) as Decimal
    }
    static func computeMonthly401kDeposits(hours hoursWorked: Int, atPayRate payRate: Int, percentTo401k percent: Double) -> Decimal {
        let base = Decimal(hoursWorked * payRate) * Decimal(percent / 100.0) as NSDecimalNumber
        return base.rounding(accordingToBehavior: pennyRoundingBehavior) as Decimal
    }
}
extension Array {
    func chunked(into size: Int) -> [[Element]] {
        return stride(from: 0, to: count, by: size).map {
            Array(self[$0 ..< Swift.min($0 + size, count)])
        }
    }
}

enum Department: RawRepresentable {
    case sales
    case management
    case seniorManagement
    case other(String)

    init?(rawValue: String) {
        switch rawValue {
        case "Sales": self = .sales
        case "Management": self = .management
        case "Senior Management": self = .seniorManagement
        case let dept: self = .other(dept)
        }
    }
    var rawValue: String {
        switch self {
        case .sales: return "Sales"
        case .management: return "Management"
        case .seniorManagement: return "Senior Management"
        case .other(let dept): return dept
        }
    }
    func payRate(forYearsWorked numberOfYears: Int) -> Int {
        let rates: [Int]
        switch self {
        case .sales: rates = [20,22,24,26,28,30,32,34,36,38,40]
        case .management: rates = [30,32,34,36,38,40,42,44,46,48,50]
        case .seniorManagement: rates = [40,42,44,46,48,50,52,54,56,58,60]
        default: rates = [10,12,14,16,18,20,22,24,26,28,30]
        }
        return rates[min(numberOfYears, rates.count) - 1]
    }
}

struct Employee {
    let name: String
    var birthdate: Date
    var hiredate: Date
    var retirementAge: Int
    var department: Department
    var monthlyHoursWorked: Int
    var existing401kbalance: Decimal
    var percentToRoth: Double
    var percentToTrad: Double
    var marketReturnRate: Double

    private(set) var employmentHistory: [Department]
    
    init(_ name: String,
         birthdate: Date,
         hiredate: Date,
         retirementAge: Int,
         department: Department = .other("Employee"),
         monthlyHoursWorked: Int,
         existing401kbalance: Decimal,
         percentToRoth: Double,
         percentToTrad: Double,
         marketReturnRate: Double)
    {
        self.name = name
        self.birthdate = birthdate
        self.hiredate = hiredate
        self.retirementAge = retirementAge
        self.department = department
        self.monthlyHoursWorked = monthlyHoursWorked
        self.existing401kbalance = existing401kbalance
        self.percentToRoth = percentToRoth
        self.percentToTrad = percentToTrad
        self.marketReturnRate = marketReturnRate
        self.employmentHistory = []
    }
}
extension Employee {
    mutating func promote(to newDepartment: Department) {
        department = newDepartment
    }
    mutating func work(months: Int) {
        employmentHistory
            .append(contentsOf: Array.init(repeating: department,
                                           count: months))
    }
    mutating func work(years: Int) {
        work(months: years * 12)
    }
    mutating func work(years: Int, months: Int) {
        work(months: years * 12 + months)
    }
    func yearlyEarnings() -> [Decimal] {
        let years = employmentHistory.chunked(into: 12)
        var earnings: [Decimal] = []
        for (index, months) in years.enumerated() {
            let yearEarnings: Decimal = months.reduce(0) { runningTotal, dept in
                let payRate = dept.payRate(forYearsWorked: index + 1)
                let monthlyEarnings = Calculations.computeMonthlyEarnings(
                    hours: monthlyHoursWorked,
                    atPayRate: payRate
                )
                return runningTotal + monthlyEarnings
            }
            earnings.append(yearEarnings)
        }
        return earnings
    }
    func yearlyRothDeposits() -> [Decimal] {
        let years = employmentHistory.chunked(into: 12)
        var rothDeposits: [Decimal] = []
        for (index, months) in years.enumerated() {
            let yearRoth: Decimal = months.reduce(0) { runningTotal, dept in
                let payRate = dept.payRate(forYearsWorked: index + 1)
                let monthlyRothDeposits = Calculations.computeMonthly401kDeposits(
                    hours: monthlyHoursWorked,
                    atPayRate: payRate,
                    percentTo401k: percentToRoth
                )
                return runningTotal + monthlyRothDeposits
            }
            rothDeposits.append(yearRoth)
        }
        return rothDeposits
    }
    func yearlyTradDeposits() -> [Decimal] {
        let years = employmentHistory.chunked(into: 12)
        var tradDeposits: [Decimal] = []
        for (index, months) in years.enumerated() {
            let yearTrad: Decimal = months.reduce(0) { runningTotal, dept in
                let payRate = dept.payRate(forYearsWorked: index + 1)
                let monthlyTradDeposits = Calculations.computeMonthly401kDeposits(
                    hours: monthlyHoursWorked,
                    atPayRate: payRate,
                    percentTo401k: percentToTrad
                )
                return runningTotal + monthlyTradDeposits
            }
            tradDeposits.append(yearTrad)
        }
        return tradDeposits
    }
    func yearly401kDeposits() -> [Decimal] {
        let years = employmentHistory.chunked(into: 12)
        var all401kDeposits: [Decimal] = []
        for (index, months) in years.enumerated() {
            let year401k: Decimal = months.reduce(0) { runningTotal, dept in
                let payRate = dept.payRate(forYearsWorked: index + 1)
                let monthlyTradDeposits = Calculations.computeMonthly401kDeposits(
                    hours: monthlyHoursWorked,
                    atPayRate: payRate,
                    percentTo401k: percentToTrad
                )
                let monthlyRothDeposits = Calculations.computeMonthly401kDeposits(
                    hours: monthlyHoursWorked,
                    atPayRate: payRate,
                    percentTo401k: percentToRoth
                )
                return runningTotal + monthlyTradDeposits + monthlyRothDeposits
            }
            all401kDeposits.append(year401k)
        }
        return all401kDeposits
    }
    func calc401k(principal: Decimal, deposits: Decimal, rateOfReturn: Decimal) -> Decimal {
        //Compound interest for principal
        // P(1 + r/n)^(nt)
        //Future value of a series
        // PMT x {[(1 + r/n)^(nt) - 1] / (r/n)}
        //Key:
        // PMT = monthly payment amount
        // r = annual interest rate
        // n = numebr of times interest is compounded per year
        // t = time in years
        // ^ = ... to the power of...
        
        //Start with Conpound interest for principal
        // first segment: (1 + r/n)
        // n = compounded 12 times a year
        let principalBase = 1 + ((rateOfReturn/100)/12)
        // second segment: ^(nt)
        // n = compounded 12 times a year
        // t = time is 1 year
        let principalPower = pow(principalBase,12)
        // third segment: times P
        let principalInterest = principal * principalPower
        
        //Now Future value of the series
        //first segment: (1 + r/n)
        let rateFrequencyCompounded = 1+((rateOfReturn/100)/12)
        //second segment:
        // ^(nt) - 1
        // n = compounded 12 times a year
        // t = time is 1 year
        let toThePower = pow(rateFrequencyCompounded,12) - 1
        //third segment:
        // divided: / (r/n)
        // n = compounded 12 times a year
        let divided = toThePower / ((rateOfReturn/100)/12)
        //fourth segment:
        // mlutiplied by monthly deposit PMT
        let futureInterest = divided * deposits
        return futureInterest + principalInterest
    }
    
    func balanceOfRoth() -> [Decimal] {
        //chunk the employmentHistory into years (i.e., 12-month groups
        let years = employmentHistory.chunked(into: 12)
        
        //start with an empty array of how much the employee
        //  puts into their Roth account each year
        var averageRothContribution: [Decimal] = []
        
        for (index, months) in years.enumerated() {
            //for one year, how much was contributed by the employee
            //  to their Roth account?
            let yearToRoth: Decimal = months.reduce(0) { runningTotal, dept in
                //what is the payRate for this month given a department
                //  and a number of years worked?
                let payRate = dept.payRate(forYearsWorked: index + 1)
                
                //calculate how much was put into the Roth account
                //  this month
                let monthlyToRoth = Calculations.computeMonthly401kDeposits(
                    hours: monthlyHoursWorked,
                    atPayRate: payRate,
                    percentTo401k: percentToRoth
                )
                
                //add the monthly Roth amount to the amounts for the
                //  rest of the amounts in this year
                return runningTotal + monthlyToRoth
            }
            
            //add the average of this year's amounts to the array of other year average amounts
            averageRothContribution.append(yearToRoth / Decimal(months.count))
        }
        
        //averageRothContribution now contains the average amount
        //  in each year that the employee contributed
        
        //start with an empty array of the balance in the
        //  employee's Roth account on a yearly basis
        var rothBalances: [Decimal] = []
        
        for idx in averageRothContribution.indices {
            //our principal will either be existingBalance (for the first item)
            //  or the previous item (for items 2...n)
            let principal = idx == 0
            ? existing401kbalance
            : rothBalances[idx - 1]
            
            //calculate the yearly balance
            let balance401k = calc401k(principal: principal,
                                       deposits: averageRothContribution[idx],
                                       rateOfReturn: Decimal(marketReturnRate)
            )
            
            //and add it to our list of balances
            rothBalances.append(balance401k)
        }
        
        //give it back to the caller
        return rothBalances
    }
    func balanceOfTrad() -> [Decimal] {
        //chunk the employmentHistory into years (i.e., 12-month groups
        let years = employmentHistory.chunked(into: 12)
        
        //start with an empty array of how much the employee
        //  puts into their Trad account each year
        var averageTradContribution: [Decimal] = []
        
        for (index, months) in years.enumerated() {
            //for one year, how much was contributed by the employee
            //  to their Trad account?
            let yearToTrad: Decimal = months.reduce(0) { runningTotal, dept in
                //what is the payRate for this month given a department
                //  and a number of years worked?
                let payRate = dept.payRate(forYearsWorked: index + 1)
                
                //calculate how much was put into the Trad account
                //  this month
                let monthlyToTrad = Calculations.computeMonthly401kDeposits(
                    hours: monthlyHoursWorked,
                    atPayRate: payRate,
                    percentTo401k: percentToTrad
                )
                
                //add the monthly Trad amount to the amounts for the
                //  rest of the amounts in this year
                return runningTotal + monthlyToTrad
            }
            
            //add the average of this year's amounts to the array of other year average amounts
            averageTradContribution.append(yearToTrad / Decimal(months.count))
        }
        
        //averageRothContribution now contains the average amount
        //  in each year that the employee contributed
        
        //start with an empty array of the balance in the
        //  employee's Roth account on a yearly basis
        var tradBalances: [Decimal] = []
        
        for idx in averageTradContribution.indices {
            //our principal will either be existingBalance (for the first item)
            //  or the previous item (for items 2...n)
            let principal = idx == 0
            ? existing401kbalance
            : tradBalances[idx - 1]
            
            //calculate the yearly balance
            let balance401k = calc401k(principal: principal,
                                       deposits: averageTradContribution[idx],
                                       rateOfReturn: Decimal(marketReturnRate)
            )
            
            //and add it to our list of balances
            tradBalances.append(balance401k)
        }
        
        //give it back to the caller
        return tradBalances
    }
    func balanceOfCombined() -> [Decimal] {
        let rothBalances = balanceOfRoth()
        let tradBalances = balanceOfTrad()

        let combinedBalances = Array(zip(rothBalances, tradBalances)).map { $0.0 + $0.1 }
        return combinedBalances
    }
}
extension Employee {
    func yearlyDepartments() -> [String] {
        let years = employmentHistory.chunked(into: 12)
        let departments: [String] = years.map { months in
            var seenDepts: Set<String> = []
            return months.reduce(into: [String]()) { acc, dept in
                if seenDepts.insert(dept.rawValue).inserted {
                    acc.append(dept.rawValue)
                }
            }.joined(separator: ",") //concat the final result with , separator
        }
        return departments
    }
    func yearlyDepartmentsEarnings() -> [(String, Decimal)] {
        let yearlyDepartments = yearlyDepartments()
        let yearlyEarnings = yearlyEarnings()
        let yearlyDepartmentsEarnings: [(departments: String, earnings: Decimal)] =
        Array(zip(yearlyDepartments, yearlyEarnings))
        return yearlyDepartmentsEarnings
    }
    func yearlyInvestingDeposits() -> [(Decimal, (Decimal, Decimal))] {
        let yearlyRoth = yearlyRothDeposits()
        let yearlyTrad = yearlyTradDeposits()
        let yearlyCombined = yearly401kDeposits()
        let yearlyInvesting: [(roth: Decimal, (trad: Decimal, combined: Decimal))] =
        Array(zip(yearlyRoth, zip(yearlyTrad, yearlyCombined)))
        return yearlyInvesting
    }
    func yearlyInvestingBalances() -> [(Decimal, (Decimal, Decimal))] {
        let yearlyRoth = balanceOfRoth()
        let yearlyTrad = balanceOfTrad()
        let yearlyCombined = balanceOfCombined()
        let yearlyInvesting: [(roth: Decimal, (trad: Decimal, combined: Decimal))] =
        Array(zip(yearlyRoth, zip(yearlyTrad, yearlyCombined)))
        return yearlyInvesting
    }
}
var birthdate = DateComponents(calendar: .current, year: 1965, month: 7, day: 20).date!
var hiredate = DateComponents(calendar: .current, year: 2021, month: 12, day: 28).date!
var promotion1date = DateComponents(calendar: .current, year: 2023, month: 12, day: 28).date!
var firstDeptMonths: Int { Calendar.current.dateComponents([.month], from: hiredate, to: promotion1date).month! }
var promotion2date = DateComponents(calendar: .current, year: 2025, month: 6, day: 28).date!
var secondDeptMonths: Int { Calendar.current.dateComponents([.month], from: promotion1date, to: promotion2date).month! }
var promotion3date = DateComponents(calendar: .current, year: 2026, month: 12, day: 28).date!
var thirdDeptMonths: Int { Calendar.current.dateComponents([.month], from: promotion2date, to: promotion3date).month! }
var retireAge = 65
let retireDate = Calendar.current.date(byAdding: .year, value: retireAge, to: birthdate)!
var fourthDeptMonths: Int { Calendar.current.dateComponents([.month], from: promotion3date, to: retireDate).month! }

extension Date {
    var age: Int { Calendar.current.dateComponents([.year], from: self, to: Date()).year! }
    var yearGroup: Int { Calendar.current.dateComponents([.year], from: self, to: Date()).year! + 1}
    var totalYearsRemaining: Int { Calendar.current.dateComponents([.year], from: self, to: retireDate).year! }
    var totalMonthsRemaining: Int { Calendar.current.dateComponents([.month], from: self, to: retireDate).month! }
}
//age
let age = birthdate.age
//number of years employee has worked for the company
let yearGroup = hiredate.yearGroup

func printYearlyDepartmentsAndEarnings(_ yearlyDeptsAndEarnings: [(departments: String, earnings: Decimal)]) {
    for (year, deptsAndEarnings) in yearlyDeptsAndEarnings.enumerated() {
        print("Department(s) for Year \(year + yearGroup + 1): \(deptsAndEarnings.departments)")
        print("Earnings for Year \(year + yearGroup + 1): \(deptsAndEarnings.earnings)")
        print("Age: \(year + age)")
        print("")
    }
}
func print401kDeposits(_ deposits401k: [(roth: Decimal, (trad: Decimal, combined: Decimal))]) {
    for (year, deposits) in deposits401k.enumerated() {
        print("Roth 401k Deposits Year \(year + yearGroup + 1): \(deposits.roth)")
        print("Trad 401k Deposits Year \(year + yearGroup + 1): \(deposits.1.trad)")
        print("Combined 401k Deposits Year \(year + yearGroup + 1): \(deposits.1.combined)")
    }
}
func print401kBalances(_ combinedBalance: [(rothBalance: Decimal, (tradBalance: Decimal, combined: Decimal))]) {
    for (year, combined) in combinedBalance.enumerated() {
        print("Roth 401k Balance Year \(year + yearGroup + 1): \(combined.rothBalance)")
        print("Trad 401k Balance Year \(year + yearGroup + 1): \(combined.1.tradBalance)")
        print("Combined 401k Balance Year \(year + yearGroup + 1): \(combined.1.combined)")
    }
}
var charlotte = Employee("Charlotte Grote", birthdate: birthdate, hiredate: hiredate, retirementAge: 65, department: .other("Hospitality"), monthlyHoursWorked: 160, existing401kbalance: 1000, percentToRoth: 10.0, percentToTrad: 16.0, marketReturnRate: 10.0)
//give our employee some work history
//months in Hospitality
charlotte.work(months: firstDeptMonths)
//ohh, a promotion!
charlotte.promote(to: .sales)
//months in Sales
charlotte.work(months: secondDeptMonths)
//another promotion. way to go, Charlotte!
charlotte.promote(to: .management)
//months in Management
charlotte.work(months: thirdDeptMonths)
//another promotion. way to go, Charlotte!
charlotte.promote(to: .seniorManagement)
//months in Senior Management
charlotte.work(months: fourthDeptMonths)
//printYearlyDepartmentsAndEarnings(charlotte.yearlyDepartmentsEarnings())
//print401kDeposits(charlotte.yearlyInvestingDeposits())
print401kBalances(charlotte.yearlyInvestingBalances())
